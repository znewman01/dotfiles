#+TITLE: Doom Emacs Config
#+PROPERTY: header-args:emacs-lisp :noweb yes :results none :tangle config.el

* Preliminaries
Use [[https://www.emacswiki.org/emacs/LexicalBinding][lexical binding]]:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

Nice imports:

#+begin_src emacs-lisp
(require 'url)
(require 'cl-lib)
(require 'f)
(require 's)
(require 'dash)
(require 'json)
#+end_src

Make the ~doom~ docs work (hack due to Nix chicanery):
#+begin_src emacs-lisp
(setq doom-modules-dir (f-join (f-dirname doom-core-dir) "modules/")
      doom-docs-dir (f-join (f-dirname doom-core-dir) "docs/"))
#+end_src

And some PII to put in my [[github:znewman01/dotfiles][dotfiles]]:
#+begin_src emacs-lisp
(setq user-full-name "Zachary Newman"
      user-mail-address "z@znewman.net")
#+end_src

Take a hint from Vim on to extra key commands (use ~,~).
#+begin_src emacs-lisp
(setq doom-localleader-key ",")
#+end_src

And make an insert-mode leader that doesn't conflict with XMonad:
#+begin_src emacs-lisp
(setq doom-leader-alt-key "s-SPC")
(setq doom-localleader-alt-key "s-SPC m")
#+end_src

Emacs everywhere:
#+begin_src emacs-lisp
(setq emacs-everywhere--dir (f-join doom-cache-dir "emacs-everywhere"))
(mkdir emacs-everywhere--dir t)
(when (eq system-type 'gnu/linux)
  (setq emacs-everywhere-paste-command nil
        emacs-everywhere-window-focus-command '("xdotool" "key" "--clearmodifiers" "--window" "%w" "Shift+Insert")))
#+end_src

* Searching
#+begin_src emacs-lisp
(map!
  "C-;" #'embark-dwim
  :map minibuffer-mode-map
  "C-o" #'embark-act
  "C-t" #'embark-become)
#+end_src
* org
:PROPERTIES:
:header-args: :noweb-ref org
:END:
#+begin_src emacs-lisp :noweb-ref nil
(after! org
  (require 'org-ql)
  (require 'org-super-agenda)
  (require 'org-attach)
  (require 'org-capture)
  <<org>>)
#+end_src
** Tagging and task mgmt
#+begin_src emacs-lisp :tangle no
(setq org-log-done t)
(setq org-log-state-notes-into-drawer t)
(setq org-todo-keywords
      '((sequence "NEXT(n)" "TODO(t)" "|" "DONE(d!)")
        (sequence "HABIT(h)" "|" "HABITDONE(H)")
        (sequence "PROJ(p)" "BLOCKEDPROJ(b)" "|" "PROJDONE(P)")
        (sequence "WAITING(w)" "SOMEDAY(s)" "|" "CANCELLED(c)")))
(setq org-enforce-todo-dependencies nil)
(setq org-tag-persistent-alist '((:startgroup . nil)
                                 ("@errand" . ?e)
                                 ("@home" . ?h)
                                 (:endgroup . nil)
                                 ("SOMEDAY" . ?s)
                                 ("internet" . ?i)
                                 ("chainguard" . ?c)
                                 ("personal" . ?p)
                                 ("katie" . ?k)))
#+end_src
*** Org files+general config
#+begin_src emacs-lisp :tangle no
(setq org-directory "~/notes")
(defun org-file (f)
  (concat org-directory "/" f))
(setq org-agenda-files
      (mapcar #'org-file
              '("personal.org"
                "gtd.org"
                "projects.org"
                "chainguard.org"
                "research/default.org"
                "inbox-mac.org"
                "school.org")))
(setq org-archive-location "archive/%s::")
(setq org-attach-directory (org-file ".attach"))
(setq org-attach-id-dir (org-file ".attach"))
(setq org-default-notes-file (org-file "gtd.org"))
(setq org-id-locations-file (org-file ".org-id-locations"))
#+end_src

*** Agenda
#+begin_src emacs-lisp :noweb-ref nil
(after! org-super-agenda
  (require 'evil-org-agenda)
  (org-super-agenda-mode)
  (setq org-super-agenda-header-map evil-org-agenda-mode-map) ; https://github.com/alphapapa/org-super-agenda/issues/50
  (setq org-super-agenda-header-map (make-sparse-keymap))
  (setq org-agenda-prefix-format '((agenda . " %?-12t% s")
                                   (timeline . "  % s")
                                   (todo . "")
                                   (tags . "")
                                   (search . "g%-8:e")))
  (setf (alist-get 'agenda org-agenda-sorting-strategy) '(habit-down time-up priority-up category-keep))
  (setq org-agenda-custom-commands
        (let ((stuck-common
               '(org-ql-block '(and
                                (not (tags "SOMEDAY"))
                                (or (and (todo "PROJ")
                                         (not (descendants (todo "NEXT"))))
                                    (and (todo "BLOCKEDPROJ")
                                         (not (scheduled t))
                                         (not (deadline t)))
                                    (and (todo "WAITING")
                                         (not (or (scheduled t) (deadline t))))
                                    (and (todo "SOMEDAY")
                                         (not (tags "SOMEDAY")))
                                    (and (todo "TODO")
                                         (not (ancestors (todo "PROJ" "BLOCKEDPROJ"))))))
                              ((org-ql-block-header "Stuck projects:")))))
          (cl-flet*
              ((agenda-common (priority)
                              `(agenda ""
                                       ((org-agenda-span 'day)
                                        (org-agenda-start-day "+0d")
                                        (org-agenda-skip-timestamp-if-done t)
                                        (org-agenda-skip-scheduled-if-done t)
                                        (org-agenda-skip-deadline-if-done t)
                                        (org-super-agenda-groups (quote ,(append
                                                                          (when priority
                                                                            `((:discard (:not (:priority>= ,priority)))))
                                                                          '((:discard (:not (:time-grid t)))
                                                                            (:name "Agenda:" :time-grid t))))))))
               (tasks-common (desc priority)
                             `(org-ql-block '(and
                                              (or (and (todo "NEXT") (not (tags "SOMEDAY")))
                                                  (deadline auto)
                                                  (scheduled :to today))
                                              ,(if priority
                                                   `(priority >= ,priority)
                                                 '(not (done)))
                                              (not (done))
                                              (not (scheduled :on today :with-time t)))
                                            ((org-super-agenda-groups '((:discard (:time-grid t))
                                                                        (:name "Overdue:"
                                                                         :deadline past)
                                                                        (:name "Upcoming:"
                                                                         :deadline future
                                                                         :deadline today)
                                                                        (:name "Habits"
                                                                         :todo "HABIT")
                                                                        (:name "Scheduled:"
                                                                         :scheduled past
                                                                         :scheduled today)
                                                                        (:name "Work:"
                                                                         :tag "chainguard")
                                                                        (:name "Errands:" :order 1
                                                                         :tag "@errand")
                                                                        (:name "Home:" :order 1
                                                                         :tag "@home")
                                                                        (:discard (:tag "yak"))
                                                                        (:name "Other tasks:"
                                                                         :anything t)))
                                             (org-ql-block-header ,(concat desc " tasks:")))))
               (work-with-priority (keys priority)
                                   (let ((title (s-concat "Work (priority=" (or priority "all") ")")))
                                     (list keys title
                                           (list (agenda-common priority)
                                                 stuck-common
                                                 (tasks-common title priority))
                                           '((org-agenda-tag-filter-preset '("+chainguard"))))))
               (all-with-priority (keys priority)
                                  (let ((title (s-concat "All (priority=" (or priority "all") ")")))
                                    (list keys  title
                                          (list (agenda-common priority)
                                                stuck-common
                                                (tasks-common title priority))))))
            (list (work-with-priority "nww" "A")
                  (work-with-priority "nwa" "A")
                  (work-with-priority "nwb" "B")
                  (work-with-priority "nwc" "C")
                  (work-with-priority "nwA" nil)
                  (all-with-priority "nn" "A")
                  (all-with-priority "na" "A")
                  (all-with-priority "nb" "B")
                  (all-with-priority "nc" "C")
                  (all-with-priority "nA" nil))))))


#+end_src
*** Capture
#+begin_src emacs-lisp :tangle no
(setq org-capture-templates nil)
(push '("l" "Link to current file" entry
        (file+headline "~/notes/gtd.org" "Inbox")
        "** NEXT %?\n%a\n%i\n")
      org-capture-templates)

(push '("t" "Normal TODO" entry
        (file+headline "~/notes/gtd.org" "Inbox")
        "** NEXT %?\n")
      org-capture-templates)
#+end_src
** Global org settings
#+begin_src emacs-lisp :tangle no
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
(setq org-adapt-indentation nil)
(setq org-ctrl-k-protect-subtree t)
(setq org-catch-invisible-edits 'show-and-error)
(setq org-startup-indented nil)
(setq org-startup-folded 'fold)
(setq org-show-context-detail
    (quote
        ((agenda . ancestors)
        (bookmark-jump . ancestors)
        (isearch . ancestors)
        (default . ancestors))))
(advice-add 'org-id-new :filter-return #'upcase)
#+END_SRC
*** Performance
#+begin_src emacs-lisp :tangle no
(setq org-agenda-dim-blocked-tasks nil
    org-agenda-inhibit-startup t
    org-agenda-ignore-properties '(effort appt stat category))
#+end_src
*** Math
#+begin_src emacs-lisp :tangle no
(setq org-startup-with-latex-preview nil)
#+end_src

** Keybindings
Need to be global, not ~(after! org)~.
#+begin_src emacs-lisp :noweb-ref nil
(map! :leader
      "a" (cmd! (org-agenda nil "nn"))
      "A" (cmd! (org-agenda nil "nA")))
(map! :mode org-capture-mode :localleader "s r" #'org-capture-refile)
(map! :mode org-mode :n "t" #'org-todo)
#+end_src
** org-babel
Easier NixOS and org-babel integration:
#+begin_src emacs-lisp :noweb-ref nil
(defun zjn/with-pkgs (interpreter &rest pkgs)
  (s-concat
    "#!/usr/bin/env nix-shell\n"
     "#!nix-shell -p " (s-join " " pkgs) " -i " interpreter))
(defun zjn/with-pkgs-bash (&rest pkgs)
  (apply #'zjn/with-pkgs (cons "bash" pkgs)))
#+end_src

Use like so:

#+begin_example
#+begin_src bash :shebang (zjn/with-pkgs-bash "hello") :results verbatim
hello
#+end_src

#+RESULTS:
: Hello, world!
#+end_example
** Export
#+begin_src
(setq org-preview-latex-default-process 'imagemagick)
                                      ; (plist-put org-format-latex-options :background "Transparent")
(setq org-latex-pdf-process '("tectonic %f"))
#+end_src
** org-roam
#+begin_src emacs-lisp :noweb-ref nil
(after! org-roam
  (setq org-roam-directory "~/Sync/notes/roam"
        org-roam-completion-everywhere nil
        +org-roam-open-buffer-on-find-file nil))
#+end_src
* Bibliography
Eventually will sort through this.
#+begin_src emacs-lisp
(use-package! bibtex-completion
  :config
  (setq bibtex-files (list "~/Sync/notes/lit/default.bib")
        bibtex-dialect 'biblatex)
  (setq bibtex-completion-bibliography "~/Sync/notes/lit/default.bib"
        bibtex-completion-library-path "~/Sync/notes/lit/"
        bibtex-completion-notes-path "~/Sync/notes/roam/bib/"))
(use-package! org
  :after bibtex-completion
  :config
  (setq org-cite-global-bibliography (list bibtex-completion-bibliography)))
(use-package! org-roam-bibtex
  :after org-roam org
  :config
    (setq orb-roam-ref-format 'org-cite)
    (require 'citar-org-roam)
    (citar-register-notes-source
     'orb-citar-source (list :name "Org-Roam Notes"
                             :category 'org-roam-node
                             :items #'citar-org-roam--get-candidates
                             :hasitems #'citar-org-roam-has-notes
                             :open #'citar-org-roam-open-note
                             :create #'orb-citar-edit-note
                             :annotate #'citar-org-roam--annotate))
    (setq citar-notes-source 'orb-citar-source))
(use-package! citar
  :after org bibtex-completion
  :config
  (setq org-cite-insert-processor 'citar
        org-cite-follow-processor 'citar
        org-cite-activate-processor 'citar
        citar-bibliography (list bibtex-completion-bibliography)
        citar-library-paths (list bibtex-completion-library-path))
  (defvar zjn-citar-embark-become-map
    (let ((map (make-sparse-keymap)))
        (define-key map (kbd "f") 'citar-open)
        (define-key map (kbd "a") 'biblio-arxiv-lookup)
        (define-key map (kbd "d") 'biblio-dblp-lookup)
        (define-key map (kbd "i") 'org-cite-insert)
    map)
  "Citar Embark become keymap for biblio lookup.")
  (map!
   :leader
   "n b" #'citar-open
   "n B" #'org-cite-insert))
;; TODO: dl file?
(after! (citar embark)
  (add-to-list 'embark-become-keymaps 'zjn-citar-embark-become-map))
(use-package! biblio
  :config
  (defun zjn--format-citekey (authors year)
    "Mimic BibTex 'alpha' style."
    (let* ((authors (-non-nil authors))
           (last-names (-map (-compose  #'-last-item #'s-split-words) authors))
           (last-initials (-map (-partial #'s-left 1) last-names))
           (threshold 3)
           (author-block (cond ((= (length authors) 1) (s-left 3 (car last-names)))
                               ((<= (length authors) threshold) (apply #'s-concat last-initials))
                               ((> (length authors) threshold) (apply #'s-concat (append (-take threshold last-initials) '("+"))))
                               (t error "bad author list"))))
      (s-concat author-block (s-right 2 year))))
  (defun zjn--add-biblio-selection-to-bibliography (bibtex entry)
    (let* ((citekey (zjn--format-citekey (alist-get 'authors entry) (alist-get 'year entry)))
           (bibtex-new (replace-regexp-in-string "@[[:alpha:]]*{\\(.*?\\),\\(.\\|\n\\)*\\'" citekey bibtex t t 1)))
      (f-append-text (s-append "\n\n" bibtex-new) 'utf-8 (car bibtex-files))
      (message "Added: %s" citekey)))
  (defun zjn-add-biblio-selection-to-bibliography--action ()
    (interactive)
    (biblio--selection-forward-bibtex #'zjn--add-biblio-selection-to-bibliography))
  (add-to-list #'biblio-selection-mode-actions-alist '("Add to bibliography" . zjn-add-biblio-selection-to-bibliography--action))
  (map!
    :mode biblio-selection-mode
    "RET" #'zjn-add-biblio-selection-to-bibliography--action))
#+end_src
* Theme
Use base16 theme; this is nice because it's easy to match with the rest of my desktop.
#+begin_src emacs-lisp
(when (file-directory-p "~/.doom-themes")
  (add-to-list 'custom-theme-load-path "~/.doom-themes")
  (setq doom-theme nil)
  (load-theme 'base16-zjn t)
  ; I want to be able to see which workspace is selected; the default highlighting is too weak.
  (set-face-background '+workspace-tab-selected-face (plist-get base16-zjn-colors :base02))
  (set-face-foreground '+workspace-tab-selected-face (plist-get base16-zjn-colors :base0D)))
#+end_src

Some reasonable fonts:
#+begin_src emacs-lisp
(let ((fonts-el "~/.doom-themes/fonts.el"))
  (when (f-exists-p fonts-el) (load-file fonts-el)))
#+end_src

And some padding:
#+begin_src emacs-lisp
(setq-default left-margin-width 1
              right-margin-width 1)
#+end_src

* Do the Work
Now that that's all out of the way, we can get to actual work.
** Project Management
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-project-search-path '("~/git"))
  (defun zjn-projectile-root-for-some-major-modes (_dir)
    (let ((modes '(mu4e-headers-mode mu4e-main-mode mu4e-view-mode org-agenda-mode)))
      (if (memq major-mode modes) "~/Sync/notes")))
  (setq +workspaces-on-switch-project-behavior t))
#+end_src
** Coding
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.2))
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src
*** Inheritenv
#+begin_src emacs-lisp
(require 'inheritenv)
(require 'format-all)
(inheritenv-add-advice 'call-process-region)
(inheritenv-add-advice 'call-process)
(inheritenv-add-advice 'shell-command)
(inheritenv-add-advice 'format-all--buffer-thunk)
#+end_src
*** Rust
#+begin_src emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rust-analyzer)
  (inheritenv-add-advice 'rustic-format-start-process)
  (inheritenv-add-advice 'rustic-compilation)
  (map! :map (conf-toml-mode-map rustic-mode-map)
        :localleader
        (:prefix ("c" . "cargo")
         :desc "cargo audit"    "a" #'+rust/cargo-audit
         :desc "cargo build"    "b" #'rustic-cargo-build
         :desc "cargo bench"    "B" #'rustic-cargo-bench
         :desc "cargo check"    "c" #'rustic-cargo-check
         :desc "cargo clippy"   "C" #'rustic-cargo-clippy
         :desc "cargo doc"      "d" #'rustic-cargo-doc
         :desc "cargo fmt"      "f" #'rustic-cargo-fmt
         :desc "cargo new"      "n" #'rustic-cargo-new
         :desc "cargo outdated" "o" #'rustic-cargo-outdated
         :desc "cargo run"      "r" #'rustic-cargo-run)
        (:prefix ("t" . "cargo test")
         :desc "all"          "a" #'rustic-cargo-test
         :desc "current test" "t" #'rustic-cargo-current-test)))
#+end_src
*** Golang
#+begin_src emacs-lisp
(after! go
  (inheritenv-add-advice 'gofmt-before-save))
#+end_src
*** LSP
Don't watch ~.gitignore~ files ([[https://github.com/emacs-lsp/lsp-mode/issues/713][lsp-mode#713]]):
#+begin_src emacs-lisp
(after! lsp
  (defun ++git-ignore-p (path)
    (let* (; trailing / breaks git check-ignore if path is a symlink:
           (path (directory-file-name path))
           (default-directory (file-name-directory path))
           (relpath (file-name-nondirectory path))
           (cmd (format "git check-ignore '%s'" relpath))
           (status (call-process-shell-command cmd)))
      (eq status 0)))

  (defun ++lsp--path-is-watchable-directory-a
      (fn path dir ignored-directories)
    (and (not (++git-ignore-p (f-join dir path)))
         (funcall fn path dir ignored-directories)))

  (advice-add 'lsp--path-is-watchable-directory
              :around #'++lsp--path-is-watchable-directory-a))
#+end_src
** Authoring
#+begin_src emacs-lisp
(after! latex
  (add-to-list 'TeX-command-list '("Tectonic" "tectonic --synctex %t" TeX-run-compile nil (latex-mode) :help "Run Tectonic"))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-output-extension "pdf")
  (add-hook! LaTeX-mode
    (setq TeX-command-default "Tectonic"
          TeX-output-extension "pdf")))
#+end_src
** Reading
Good readers take notes; great readers don't exit their PDFs and lose all those notes.
#+begin_src emacs-lisp
(after! pdf-view
  (require 'inheritenv)
  (inheritenv-add-advice 'pdf-annot-print-annotation)
  (defun zjn/save-buffer-no-args () (save-buffer)) ; needed to make args line up
  (advice-add 'pdf-annot-edit-contents-commit :after 'zjn/save-buffer-no-args))
#+end_src
